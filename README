json
----

A simple JSON library in C with no dependencies other than the C standard
library. Comes with a hashmap implementation. 

Include `json.h` and add `json.c` to your project. The following functions and
macros are provided:
        
        json_parse(char *)
        free_json_item(struct json *)

        json_access(struct json *, ...)                /* NOTE BELOW */
        json_safe_access(struct json *, char *, ...);  /* NOTE BELOW */

        json_get_array_item(struct json *, int)
        json_get_dict_item(struct json *, char *)

        json_get_size(struct json *)
        json_get_capacity(struct json *)

        json_get_string(struct json *)
        json_get_bool(struct json *)
        json_get_number(struct json *)
        json_get_data(struct json *)
        json_get_array(struct json *)
        json_get_dict(struct json *)

        json_read_file(char *)

Macros beginning with json_get_ are used to access the data of a parsed JSON
item. For example:
       
        struct json *j = json_parse("\"abc\"");
        char *data = json_get_string(j);  /* data now equals "abc" */

json_access() is a bit of a strange function. I added it to easily access deeply
nested information. Generally, the function works like this:
        
        json_access(j, "index1", "index2", "0", "1", NULL);

as opposed to:

        json_get_array_item(json_get_array_item(
                json_get_dict_item(
                json_get_dict_item(j, "index1"), "index2"), 0), 1
        );

The list of arguments to json_access() must end with NULL. You may notice that
array indices are also strings. This is because you can not mix types within
va_list. This will also result in conflicts if you have a dictionary with keys
that are numbers. 

The only way around this would be to provide a format string similar to the one
used by printf() and its various related functions, but this further complicates
the function. If you would like to guarantee that everything behaves as expected
or if you are working with dictionaries that use integers as keys, use the
json_safe_access() function. It works as follows:

        json_safe_access(j, "%s %s %d %d", "index1", "index2", 0, 1);

There is no need for NULL at the end.

Further information can be obtained by reading the source code.
